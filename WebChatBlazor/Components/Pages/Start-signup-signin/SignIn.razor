@page "/signin"
@layout StartLayout
@inject IUserServices _userservice
@inject NavigationManager _navmanager



<div class="container">
    <div class="row justify-content-center align-items-center h-100" style="min-height:100vh;">

        <div class="col-12 col-sm-7 col-md-6 col-lg-5 col-xl-4">

            <EditForm Model="userdto" OnValidSubmit="HandleSignIn">
                <ValidationSummary />
                <DataAnnotationsValidator />

                <div class="bg-secondary rounded-3 p-4 p-sm-5 my-4 mx-3">


                    <h4 class="text-center mb-4 text-uppercase fw-bold"> Sign In</h4>

                    <div class="form-group">

                        <label for="UserEmail">UserEmail</label>
                        <InputText class="form-control" @bind-Value="userdto.UserEmail"></InputText>
                        @if (!string.IsNullOrEmpty(GetErrorForField("UserEmail")))
                        {
                            <div style="background-color:black;">  <p class="text-danger">    @GetErrorForField("UserEmail")</p> </div>
                        }
                    </div>
                    <div class="form-group">

                        <label for="Password">Password</label>
                        <InputText type="password" class="form-control" @bind-Value="userdto.Password"></InputText>
                        @if (!string.IsNullOrEmpty(GetErrorForField("Password")))
                        {
                            <div style="background-color:black;">  <p class="text-danger">    @GetErrorForField("Password")</p> </div>
                        }
                    </div>

                    <br />
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert alert-danger">
                            <p>
                                @message
                            </p>
                        </div>
                    }
                    <div class="d-flex flex-column flex-md-row gap-3">
                        @*    <button type="submit" class="btn btn-primary py-3 w-100">Submit</button> *@
                        <SpinnerButton isbuttonworking="BSpinnerWorking">
                            Submit
                        </SpinnerButton>
                        <a href="/" class="btn btn-light py-3 w-100">Cancel</a>
                    </div>
                    <br />
                    <a href="/signIn" class="text-info">Alreade Have An Acoount?</a>

                </div>
            </EditForm>


        </div>


    </div>
</div>


@code {
    private UserSignInDto userdto = new UserSignInDto();
    private string message = string.Empty;
    private Dictionary<string, List<string>> dictionaryErrors = new Dictionary<string, List<string>>();
    private bool BSpinnerWorking = false;

    public async Task HandleSignIn()
    {
        try
        {
            BSpinnerWorking = true;
            await _userservice.SignIn(userdto);
            _navmanager.NavigateTo("/signup");
        }
        catch (ApiException ex)
        {
            BSpinnerWorking = false;
            var res = await ExceptionHandler.HandleApiException(ex);

            if (res is Dictionary<string, List<string>> errors)
            {
                foreach (var error in errors)
                {
                    string propertyname = error.Key;

                    if (dictionaryErrors.ContainsKey(propertyname))
                    {
                        dictionaryErrors[propertyname].AddRange(error.Value);
                        continue;
                    }
                    dictionaryErrors[propertyname] = error.Value;
                }
            }
            else if (res is ExeptionDto excptionDto)
            {
                message = $"{excptionDto.Message}, {excptionDto.StatusCode}";
                //working = false;
            }



        }
    }

    private string GetErrorForField(string fieldName)
    {
        if (dictionaryErrors.ContainsKey(fieldName))
        {
            return string.Join(",", dictionaryErrors[fieldName]);
        }
        return string.Empty;
    }
}




