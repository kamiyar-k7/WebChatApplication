@page "/signin"
@using System.ComponentModel.DataAnnotations
@layout StartLayout
@inject IAuthenticationService _userservice
@inject NavigationManager _navmanager


<MudMainContent Style=" height: 100vh; " Class="d-flex  justify-content-center align-items-center background">

    <MudGrid Class="login d-flex  justify-content-center align-items-center  p-5 rounded " Style="">

        <!-- Title -->
        <MudText Class="h2 mb-4" Style="font-size:1.8rem; font-weight:600;">Login</MudText>

        <!-- Login Form -->
        <EditForm Model="userdto" class="col-8" OnValidSubmit="HandleSignIn">
            <MudItem Class="mb-3 ">
                <MudTextField T="string"
                              Label="Email"
                              @bind-Value="userdto.UserEmail"
                              Placeholder="Email@example.com"
                              Variant="Variant.Filled"
                              Class="white-textfield"
                              Required
                              RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage="The Email Address Is Invalid"})" />
            </MudItem>
            @if (!string.IsNullOrEmpty(GetErrorForField("UserEmail")))
            {
                <MudText Class="text-danger">@GetErrorForField("UserEmail")</MudText>
            }


            <MudItem Class=" mb-3">
                <MudTextField T="string" Label="Password" @bind-Value="userdto.Password"
                              Variant="Variant.Filled"
                              InputType="@(showPassword ? InputType.Text : InputType.Password)"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                              OnAdornmentClick="TogglePasswordVisibility"
                              AdornmentAriaLabel="Show Password"
                              AdornmentColor="Color.Primary"
                              Required
                              Class="white-textfield" />
            </MudItem>
            @if (!string.IsNullOrEmpty(GetErrorForField("Password")))
            {
                <MudText Class="text-danger">@GetErrorForField("Password")</MudText>
            }


            @if (BSpinnerWorking)
            {
                <MudButton Disabled
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="w-100 mb-3"
                           Style="height: 50px;">

                    <MudProgressCircular Color="Color.Primary"
                                         Size="Size.Medium" Indeterminate />
                </MudButton>

            }
            else
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           ButtonType="ButtonType.Submit"
                           Class="w-100 mb-3"
                           Style="height: 50px;"> Submit </MudButton>
            }

            @if (!string.IsNullOrEmpty(message))
            {
                <MudText Class="bg-danger">@message</MudText>
            }

            <!-- Register Link -->
            <MudText Class="text-center">
                Don't have an account? <MudLink Href="/Signup" Class="text-primary">Register</MudLink>
            </MudText>
        </EditForm>
    </MudGrid>
</MudMainContent>


@code {


    private UserSignInDto userdto = new UserSignInDto();
    private string message = string.Empty;
    private Dictionary<string, List<string>> dictionaryErrors = new Dictionary<string, List<string>>();
    private bool BSpinnerWorking = false;


    private bool showPassword = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }





    public async Task HandleSignIn()
    {
        try
        {
            BSpinnerWorking = true;
            await _userservice.SignIn(userdto);

            _navmanager.NavigateTo("/");

        }
        catch (ApiException ex)
        {
            BSpinnerWorking = false;

            var error = await ExceptionHandler.HandleApiException(ex);

            if (error is Dictionary<string, List<string>> errors)
            {
                dictionaryErrors = errors;
            }
            else if (error is ExeptionDto exdto)
            {
                message = $"{exdto.Message}";

            }
            else
            {
                message = $"{ex.Response}";
            }


        }
    }


    private string GetErrorForField(string fieldName)
    {
        if (dictionaryErrors.ContainsKey(fieldName))
        {
            return string.Join(",", dictionaryErrors[fieldName]);
        }
        return string.Empty;
    }
}




<style>
    .white-textfield input {
        color: white !important;
    }

    .white-textfield label {
        color: rgba(89, 74, 226, 1) !important;
    }

    .white-textfield ::placeholder {
        color: white !important;
    }
</style>