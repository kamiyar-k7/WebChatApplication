@page "/chatpage/{id:int}"
@layout ChatLayout
@inject NavigationManager _navmanager
@inject IPrivateChatService _chatservice
@inject AuthStateProvider _state
@inject IJSRuntime JS
@attribute [Authorize]

<!--top app bar-->
<MudAppBar Style="height:70px;" Class="d-flex justify-content-center">
    <MudGrid Class="d-flex align-items-center">
        <MudItem>
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" Edge="Edge.Start" OnClick="BackToHome" Style="color:white;" />
        </MudItem>

        <MudItem Class="">
            <MudImage Src="/Images/webicon.jpg" Alt="User Profile" ObjectFit="ObjectFit.Cover" Fluid="true"
                      Width="50" Height="50" ObjectPosition="ObjectPosition.Center" Class="rounded-circle" />
        </MudItem>

        <MudItem>
            @if (otherUserDto.Id == CurrntUserId)
            {
                <MudText Class="h6 fw-bold">Saved Messages</MudText>
            }
            else
            {
                <MudText Class="h6 fw-bold">@otherUserDto.UserName</MudText>
                <MudText Class="fw-light">Online</MudText>
            }
        </MudItem>

        <MudSpacer />
        <MudItem Class="d-flex justify-content-end">
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Large" Edge="Edge.End" Style="color:white;" />
        </MudItem>
    </MudGrid>
</MudAppBar>

<!-- chats -->
<div @ref="chatContainer" class="overflow-auto overflow-x-hidden " style="height:calc(100vh - 170px); padding-top:15px !important; ">
    <MudMainContent Class="p-0">
        @if (ListOfMessages.Any())
        {
            @foreach (var message in ListOfMessages)
            {
                @if (message.SenderId == CurrntUserId)
                {
                    <MudGrid Class="row d-flex m-1 flex-row-reverse p-1" Style=" padding-right:40px !important;">
                        <MudItem xs="9" Style="height:auto;  border-top-right-radius:0px !important; " Class="d-flex flex-column text-end bg-primary rounded-5 m-1">
                            <MudText Class="fw-bold text-white px-1 ">YOU</MudText>
                            <MudDivider />
                            <MudText Class="text-white p-2">
                                <pre Style="white-space: pre-wrap; word-break: break-word; direction: @GetDirection(message.Content)">@message.Content</pre>
                            </MudText>
                            <MudDivider />
                            <time Class="px-1 text-white">@string.Format("{0:dd/MM/yyyy HH:mm}", message.Timestamp) </time>
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    <MudGrid Class="row d-flex m-1 py-0 px-1">
                        <MudItem xs="3" sm="1">
                            <MudImage Src="/Images/webicon.jpg" Alt="User Profile" ObjectFit="ObjectFit.Cover" Fluid="true"
                            ObjectPosition="ObjectPosition.Center" Class="rounded-circle bg-transparent" />
                        </MudItem>
                        <MudItem xs="8" sm="8" Style="height:auto; border-top-left-radius:0px !important; " Class="bg-secondary rounded-5 p-2 ">
                            <MudText Class="fw-bold text-white px-1">@message.ResiverName</MudText>
                            <MudDivider />
                            <MudText Class="text-white p-2">
                                <pre Style="white-space: pre-wrap; word-break: break-word; direction: @GetDirection(message.Content)">@message.Content</pre>
                            </MudText>
                            <MudDivider />
                            <time Class="px-1 text-white">@message.Timestamp</time>
                        </MudItem>
                    </MudGrid>
                }
            }
        }
        else
        {
            <MudGrid Class="d-flex align-items-center justify-content-center vh-100 m-0">
                <MudItem xs="12" Class="d-flex align-items-center justify-content-center text-center">
                    <MudText Class="text-white bg-dark">
                        You Have No Messages Here
                        <br />
                        Send A Message To Start Chat!
                    </MudText>
                </MudItem>
            </MudGrid>
        }
    </MudMainContent>
</div>

<!--Bottom app bar-->
<MudAppBar Bottom="true" Fixed="true" Elevation="1" Style="height:100px;" Class="d-flex justify-content-center bg-dark">
    <EditForm Model="model" OnValidSubmit="SendMessage" Class=" d-flex align-items-center col-12" Style="height:auto;">
        <MudGrid Class=" d-flex align-items-center" Style="height:auto;">
            <MudItem xs="10" Class="d-flex">

                <MudTextField @bind-Value="@model.Content"
                Placeholder="Type your message..."
                Variant="Variant.Outlined"
                Adornment="Adornment.None"
                Class="w-100 white-text"
                AutoGrow 
                MaxLines="3"
                Style="height: auto;" 
                Required/>

            </MudItem>

            <MudItem xs="2" Class="d-flex justify-content-center">

                <MudButton ButtonType="ButtonType.Submit"
                Variant="Variant.Filled"
                Color="Color.Primary"
                EndIcon="@Icons.Material.Filled.Send"
                IconColor="Color.Info"
                Class=" white-text w-100">
                </MudButton>


            </MudItem>
        </MudGrid>
    </EditForm>
</MudAppBar>



@code {

    #region fields and methods 
    [Parameter]
    public int id { get; set; }
    private List<MessageDto> ListOfMessages = new();
    private MessageDto model = new MessageDto();
    private OtherUserDto? otherUserDto { get; set; } = new OtherUserDto();
    private int conId = 0;
    private int CurrntUserId;
    private HubConnection? HubConnection;
    private bool _shouldScrollToBottom = false;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        var claims = await _state.GetClaims();
        CurrntUserId = int.Parse(claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier).Value);

        // Get other user
        otherUserDto = await _chatservice.GetOtherUserDto(id);

        // Get conversation id
        conId = await _chatservice.IsConversationExist(CurrntUserId, id);

        // Get messages
        ListOfMessages = conId != 0 ? await _chatservice.GetListOfMessages(conId, id.ToString()) : new List<MessageDto>();

        // Set up SignalR hub connection
        HubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7019/ChatHub")
            .WithAutomaticReconnect()
            .Build();

        HubConnection.On<MessageDto>("ReceiveMessage", async message =>
        {
            await InvokeAsync(async () =>
            {
                ListOfMessages = await _chatservice.GetListOfMessages(conId, id.ToString());
                _shouldScrollToBottom = true;
                StateHasChanged();
            });
        });

        await HubConnection.StartAsync();
        _shouldScrollToBottom = true;
    }

    private async Task SendMessage()
    {
        try
        {
            if(model.Content == null || model.Content == "")
            {
                StateHasChanged();
            }
            else
            {
                model.SenderId = CurrntUserId;
                model.ResiverId = id;
                if (conId == 0)
                {
                    conId = await _chatservice.CreateConverstation(CurrntUserId, id);
                }
                model.ConverstationId = conId;


                await HubConnection.SendAsync("SendMessage", model);
                model.Content = string.Empty;

                _shouldScrollToBottom = true;
                StateHasChanged();
            }
         
        }
        catch (ApiException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    #region scrool
    private ElementReference chatContainer;

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || _shouldScrollToBottom)
        {
            await ScrollToBottom();
            _shouldScrollToBottom = false;
        }
    }
    #endregion


    private string GetDirection(string content)
    {
        return content.Any(c => char.GetUnicodeCategory(c) == System.Globalization.UnicodeCategory.OtherLetter) ? "rtl" : "ltr";
    }

    private void BackToHome()
    {
        _navmanager.NavigateTo("/");
    }
}

<style>
    .rtl-text {
        direction: rtl;
        text-align: right;
    }

    .ltr-text {
        direction: ltr;
        text-align: left;
    }
</style>

<script>
    function scrollToBottom(element) {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    }
</script>
